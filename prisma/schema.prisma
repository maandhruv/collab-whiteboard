// Prisma schema for collaborative whiteboard
// Run migrations: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // simple local dev; swap to postgresql in prod
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String?
  image       String?
  passwordHash String?
  // provider accounts if using OAuth in future
  whiteboards Whiteboard[]
  accounts    Account[]
  sessions    Session[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Whiteboard {
  id         String   @id @default(cuid())
  roomId     String   @unique
  accessCode String   @unique
  title      String?  @default("Untitled Board")
  ownerId    String
  owner      User     @relation(fields: [ownerId], references: [id])
  snapshots  Snapshot[]
  lastOpenedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Snapshot {
  id          String   @id @default(cuid())
  whiteboard  Whiteboard @relation(fields: [whiteboardId], references: [id])
  whiteboardId String
  // Compressed Yjs document or delta JSON
  data        Bytes
  createdAt   DateTime @default(now())
}

// NextAuth standard models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
